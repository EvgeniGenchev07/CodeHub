@using BusinessLayer
@model dynamic
@{
    ViewData["Title"] = "Курс";
}
@section Styles {
    <link rel="stylesheet" href="~/css/courses_details.css" />
    <style>
        .popup-overlay {
            position: fixed;
            top: 0; left: 0;
            width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }

        .popup-content {
            position: relative;
            width: 90%;
            max-width: 800px;
            background: #000;
            padding: 0;
            border-radius: 10px;
            overflow: hidden;
        }

        .popup-content video {
            width: 100%;
            height: auto;
            display: block;
        }

        .close-btn {
            position: absolute;
            top: 10px; right: 20px;
            font-size: 2rem;
            color: #fff;
            cursor: pointer;
            z-index: 1;
        }

    </style>
}
@{
    var course = Model is Course ? Model as Course : (Model as UserCourse).Course;
    var userCourse = Model is Course ? null : (Model as UserCourse);
}
<!-- Course Header -->
<section class="course-header mt-5">
    <div class="course-title-section">
        <div class="course-title-content">
            <span class="course-badge @(course.Difficulty==Difficulty.Easy?"badge-easy":course.Difficulty==Difficulty.Intermediate?"badge-intermediate":"badge-hard")">@course.Difficulty.ToString()</span>
            <h1 class="course-title">@course.Name</h1>
            <p class="course-description">
                @course.Description
            </p>

            <div class="course-meta">
                <div class="meta-item">
                    <i class="fas fa-clock"></i> @course.Lessons.Count()
                </div>
                <div class="meta-item">
                    <i class="fas fa-chart-line"></i> @course.Students ученици
                </div>
            </div>

            <div class="course-actions">
                <form asp-action="Details" asp-controller="Courses" asp-all-route-id="@course.Id">
                    <button type="submit" value="Details" class="btn btn-primary btn-lg"><i class="fas fa-play"></i> Започни курс</button>
                </form>
            </div>
        </div>

        <div class="course-image">
            <i class="fab fa-@course.Filters.First().ToString().ToLower()"></i>
        </div>
    </div>
</section>
<div id="videoPopup" class="popup-overlay">
    <div class="popup-content">
        <span class="close-btn" onclick="closeVideoPopup()">&times;</span>
        <video id="video-player" controls autoplay>
            <source src="your-video.mp4" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>
</div>
<!-- Course Progress -->

@if (Model is UserCourse)
{
    <section class="course-progress-section">

        <div class="progress-header">
            <div>
                <h3 class="progress-title">Твоят напредък</h3>
                <p class="progress-subtitle">Завърши @userCourse.Completion% от курса</p>
            </div>
            <button class="btn btn-outline btn-sm"><i class="fas fa-certificate"></i> Сертификат</button>
        </div>

        <div class="progress-bar-container">
            <div class="progress-bar-bg">
                <div class="progress-bar-fill" style="width: @userCourse.Completion%;"></div>
            </div>
            <div class="progress-stats">
                <span>@(userCourse.Completion*userCourse.Course.Lessons.Count)/@course.Lessons.Count урока</span>
                <span>@userCourse.Completion%</span>
            </div>
        </div>
    </section>
}
<!-- Course Content -->
    <div class="course-content">
        <!-- Main Content -->
        <div class="course-main">
            <!-- Course Modules -->
            <section class="modules-section">
                <h2 class="section-title">Съдържание на <span class="text-gradient">курса</span></h2>

                <div class="modules-list">
                    <!-- Module 1 -->
                    @{
                        int index = 0;
                        double completed =Model is UserCourse? course.Lessons.Count* userCourse.Completion / 100:0;
                    }
                    @foreach (var lesson in course.Lessons)
                    {
                        <div class="module-card @(completed<=index+1&&completed!=0?"completed":"")">
                            <div class="module-header">
                                <div class="module-title">
                                    <i class="fas fa-chevron-right module-icon"></i>
                                    <span>@(index++). @lesson.Title</span>
                                </div>
                                <span class="module-status @(completed<=index&&completed!=0?"completed":"")">@(completed<=index&&completed!=0?"Завършен":"В процес")</span>
                            </div>

                            <div class="module-content">
                                <div class="lessons-list">
                                    <div data-courseId="@course.Id" style="pointer-events: all" data-id="@lesson.Id" class="lesson-item @(completed<=index&&completed!=0?"completed":"")">
                                        <div class="lesson-title">@lesson.Description</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </section>
        </div>

        <!-- Sidebar -->
        <aside class="course-sidebar">
            <!-- Instructor Card -->
            <div class="sidebar-card">
                <h3 class="sidebar-title"><i class="fas fa-user-tie"></i> Инструктор</h3>

                <div class="instructor-info">
                    <div class="instructor-avatar"><i class="fas fa-user"></i></div>
                    <div>
                        <div class="instructor-name">@course.Lector.Name</div>  
                    </div>
                </div>

                <p style="color: var(--gray); font-size: 0.9rem; line-height: 1.6; margin-bottom: 15px;">
                    @course.Lector.Description
                </p>

                <a href="mailto:@course.Lector.Name.ToLower()@@codehub.com"  class="btn btn-outline" style="width: 100%;text-decoration: none;"><i class="fas fa-envelope"></i> Изпрати съобщение</a>
            </div>

            <!-- Course Stats Card -->
            <div class="sidebar-card">
                <h3 class="sidebar-title"><i class="fas fa-chart-bar"></i> Статистика</h3>

                <div class="stats-list">
                    <div class="stat-item">
                        <span class="stat-label">Ученици:</span>
                        <span class="stat-value">@Model.Students</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Уроци:</span>
                        <span class="stat-value">@Model.Lessons.Count</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">Общо време:</span>
                        <span class="stat-value">@(Model.Lessons.Count*30) мин</span>
                    </div>
                @if (Model is UserCourse)
                    {
                        <div class="stat-item">
                            <span class="stat-label">Завършени:</span>
                            <span class="stat-value">@userCourse.Completion%</span>
                        </div>
                    }
                </div>
            </div>
            
        </aside>
    </div>


@section Scripts {
        <script>
          // Module accordion functionality
            const moduleHeaders = document.querySelectorAll('.module-header');
            moduleHeaders.forEach(header => {
                header.addEventListener('click', function() {
                    const moduleCard = this.parentElement;
                    moduleCard.classList.toggle('active');

                    // Close other modules if this one is opened
                    if (moduleCard.classList.contains('active')) {
                        document.querySelectorAll('.module-card').forEach(card => {
                            if (card !== moduleCard && card.classList.contains('active')) {
                                card.classList.remove('active');
                            }
                        });
                    }
                });
            });

            // Lesson item click handler
            const lessonItems = document.querySelectorAll('.lesson-item:not(.active)');
            lessonItems.forEach(item => {
                item.addEventListener('click', function() {
                    // Remove active class from all lessons
                    document.querySelectorAll('.lesson-item').forEach(lesson => {
                        lesson.classList.remove('active');
                    });

                    // Add active class to clicked lesson
                    this.classList.add('active');

                    // Here you would typically load the lesson content via AJAX
                    // For this example, we'll just simulate it
                    const lessonTitle = this.querySelector('.lesson-title').textContent;
                    document.querySelector('.lesson-title').textContent = lessonTitle;
                });
            });

            // Smooth scrolling for navigation links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function(e) {
                    e.preventDefault();

                    const targetId = this.getAttribute('href');
                    if (targetId === '#') return;

                    const targetElement = document.querySelector(targetId);
                    if (targetElement) {
                        targetElement.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Course card hover effect
            const courseCards = document.querySelectorAll('.module-card');
            courseCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = 'translateY(-5px)';
                        this.style.boxShadow = '0 5px 15px rgba(0, 247, 255, 0.1)';
                    }
                });

                card.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('active')) {
                        this.style.transform = 'translateY(0)';
                        this.style.boxShadow = 'none';
                    }
                });
            });
              document.querySelectorAll(".lesson-item").forEach((el) => {
          {
              el.addEventListener('click', function() {
                  fetch(`../Video?courseId=${el.getAttribute("data-courseId")}&id=${el.getAttribute("data-id")}`)
                      .then(res => res.arrayBuffer())
                      .then(buffer => {
                          const blob = new Blob([buffer], {type: 'video/mp4'});
                          const url = URL.createObjectURL(blob);
                          document.getElementById("videoPopup").style.display = "flex";
                          const video = document.getElementById("video-player");
                          video.src = url;
                          video.controls = true;
                          video.autoplay = true;
                          video.loop = false;
                          video.playbackRate = 0.5;
                          video.addEventListener("ended", (event) => {
                              closeVideoPopup();
                              fetch(`../VideoCompletion/${el.getAttribute("data-courseId")}`).then(res=>{});
                          })
                        });
              });
          }})

          function closeVideoPopup() {
              const popup = document.getElementById("videoPopup");
              const video = popup.querySelector("video");
              video.pause();
              popup.style.display = "none";
          }

          // Optional: close when clicking outside video
          window.onclick = function(e) {
              const popup = document.getElementById("videoPopup");
              if (e.target === popup) {
                  closeVideoPopup();
              }
};

        </script>
    }
    
