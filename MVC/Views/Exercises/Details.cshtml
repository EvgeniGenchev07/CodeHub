@model BusinessLayer.Exercise

@{
    ViewData["Title"] = "Exercise Details";
}

@section Styles {
    <link rel="stylesheet" href="~/css/exercise_details.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
}

<div class="exercise-container">
    <section class="problem-section">
        <div class="problem-header">
            <h1 class="problem-title">@Model.Title</h1>
            <span class="problem-difficulty difficulty-@Model.Difficulty.ToString().ToLower()">@Model.Difficulty</span>
        </div>

        <div class="problem-description" id="problem-description">
            <pre>@Model.Description</pre>
        </div>

        <!-- Examples will be dynamically populated from description via JavaScript -->
        <div id="examples-container"></div>
    </section>

    <section class="editor-section">
        <div class="editor-header">
            <select class="language-selector" id="language-selector">
                <option value="javascript">JavaScript</option>
                <option value="python">Python</option>
                <option value="c">C</option>
                <option value="csharp">C#</option>
                <option value="java">Java</option>
            </select>

            <div class="editor-actions">
                <button class="btn btn-outline btn-sm" id="reset-code">
                    <i class="fas fa-redo"></i> Нулирай
                </button>
                <button class="btn btn-primary btn-sm" id="run-code">
                    <i class="fas fa-play"></i> Изпълни
                </button>
            </div>
        </div>

        <textarea id="code-editor"></textarea>

        <div class="input-container">
            <label for="console-input">Конзолен вход:</label>
            <textarea id="console-input" placeholder="Въведете вход за програмата..."></textarea>
        </div>

        <div class="output-container">
            <div class="output-content" id="execution-result">
                Натиснете "Изпълни", за да видите резултата.
            </div>
        </div>
    </section>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/python/python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/clike/clike.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loader = document.getElementById('loader');
            const app = document.getElementById('app');
            const hamburger = document.getElementById('hamburger');
            const navMenu = document.getElementById('nav-menu');
            const problemDescription = document.getElementById('problem-description');
            const examplesContainer = document.getElementById('examples-container');

            // Code templates
            const codeTemplates = {
                javascript: `// Напишете вашия JavaScript код тук\nlet input = prompt();\nconsole.log("Вашият вход: " + input);`,
                python: `# Напишете вашия Python код тук\ntext = input()\nprint("Вашият вход: " + text)`,
                c: `// Напишете вашия C код тук\n#include <stdio.h>\n\nint main() {\n    char str[100];\n    scanf("%s", str);\n    printf("Вашият вход: %s\\n", str);\n    return 0;\n}`,
                csharp: `// Напишете вашия C# код тук\nusing System;\n\nclass Program {\n    static void Main() {\n        string input = Console.ReadLine();\n        Console.WriteLine("Вашият вход: " + input);\n    }\n}`,
                java: `// Напишете вашия Java код тук\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine();\n        System.out.println("Вашият вход: " + input);\n    }\n}`
            };

            // Extract sample input, output, and examples from plain text description
            function extractSampleIOAndExamples() {
                const descriptionText = problemDescription.textContent;
                const lines = descriptionText.split('\n').map(line => line.trim());
                let sampleInput = '';
                let sampleOutput = '';
                const examples = [];
                let currentExample = null;
                let currentSection = null;

                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i];

                    if (line === 'Примерен вход:') {
                        sampleInput = lines[i + 1] || '';
                        i++; // Skip the input value
                        continue;
                    }
                    if (line === 'Примерен изход:') {
                        sampleOutput = lines[i + 1] || '';
                        i++; // Skip the output value
                        continue;
                    }
                    if (line.match(/^Пример \d+ \(([^)]+)\):$/)) {
                        const match = line.match(/^Пример \d+ \(([^)]+)\):$/);
                        currentExample = { language: match[1].toLowerCase(), code: '', input: '', output: '' };
                        currentSection = null;
                        examples.push(currentExample);
                        continue;
                    }
                    if (currentExample) {
                        if (line === 'Код:') {
                            currentSection = 'code';
                            continue;
                        }
                        if (line === 'Вход:') {
                            currentSection = 'input';
                            continue;
                        }
                        if (line === 'Изход:') {
                            currentSection = 'output';
                            continue;
                        }
                        if (currentSection && line) {
                            if (currentSection === 'code') {
                                currentExample.code += (currentExample.code ? '\n' : '') + line;
                            } else if (currentSection === 'input') {
                                currentExample.input = line;
                            } else if (currentSection === 'output') {
                                currentExample.output = line;
                            }
                        }
                    }
                }

                return { sampleInput, sampleOutput, examples };
            }

            // Populate examples dynamically
            function populateExamples() {
                const { examples } = extractSampleIOAndExamples();
                examplesContainer.innerHTML = examples.map((example, index) => `
                    <div class="problem-example">
                        <h4 class="example-title">Пример ${index + 1} (${example.language.charAt(0).toUpperCase() + example.language.slice(1)}):</h4>
                        <div class="example-content">
                            <div class="example-io">
                                <div class="example-io-title">Код:</div>
                                <div>${example.code.replace(/\n/g, '<br>')}</div>
                            </div>
                            <div class="example-io">
                                <div class="example-io-title">Вход:</div>
                                <div>${example.input}</div>
                            </div>
                            <div class="example-io">
                                <div class="example-io-title">Изход:</div>
                                <div>${example.output}</div>
                            </div>
                        </div>
                    </div>
                `).join('');
            }

            // Call populateExamples to render examples
            populateExamples();

            // Loader animation
            setTimeout(() => {
                loader.style.opacity = '0';
                setTimeout(() => {
                    loader.style.display = 'none';
                    app.style.display = 'block';
                    setTimeout(() => app.style.opacity = '1', 50);
                }, 500);
            }, 1500);

            // Hamburger menu toggle
            hamburger.addEventListener('click', () => {
                navMenu.classList.toggle('active');
                const icon = hamburger.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });

            // Close menu when clicking a link
            document.querySelectorAll('.nav-links a').forEach(link => {
                link.addEventListener('click', () => {
                    navMenu.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                });
            });

            // Close menu when clicking outside
            document.addEventListener('click', event => {
                if (!navMenu.contains(event.target) && !hamburger.contains(event.target)) {
                    navMenu.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            // Initialize CodeMirror
            const editor = CodeMirror.fromTextArea(document.getElementById('code-editor'), {
                lineNumbers: true,
                theme: 'dracula',
                mode: 'javascript',
                indentUnit: 4,
                lineWrapping: true,
                extraKeys: {
                    'Ctrl-Enter': runCode,
                    'Cmd-Enter': runCode
                },
                gutter: true,
                fixedGutter: true
            });

            // Set initial code template
            editor.setValue(codeTemplates.javascript);

            // Extract and set sample input
            const { sampleInput } = extractSampleIOAndExamples();
            if (sampleInput) {
                document.getElementById('console-input').value = sampleInput;
            }

            // Force refresh of editor
            setTimeout(() => editor.refresh(), 0);

            // Language selector
            const languageSelector = document.getElementById('language-selector');
            languageSelector.addEventListener('change', () => {
                const language = languageSelector.value;
                let mode;
                switch (language) {
                    case 'python': mode = 'python'; break;
                    case 'c': mode = 'text/x-csrc'; break;
                    case 'csharp': mode = 'text/x-csharp'; break;
                    case 'java': mode = 'text/x-java'; break;
                    default: mode = 'javascript';
                }
                editor.setOption('mode', mode);
                resetCode(language);
                editor.refresh();
            });

            // Reset code
            document.getElementById('reset-code').addEventListener('click', () => {
                resetCode(languageSelector.value);
                document.getElementById('console-input').value = sampleInput || '';
                editor.refresh();
            });

            function resetCode(language) {
                editor.setValue(codeTemplates[language] || codeTemplates.javascript);
                document.getElementById('execution-result').innerHTML = 'Натиснете "Изпълни", за да видите резултата.';
            }

            // Run code
            document.getElementById('run-code').addEventListener('click', runCode);

            async function runCode() {
                const language = languageSelector.value;
                const code = editor.getValue();
                const input = document.getElementById('console-input').value;
                const outputDiv = document.getElementById('execution-result');

                const pistonLanguages = {
                    javascript: { name: 'javascript', version: '18.15.0' },
                    python: { name: 'python', version: '3.10.0' },
                    c: { name: 'c', version: '10.2.0' },
                    csharp: { name: 'csharp', version: '6.12.0' },
                    java: { name: 'java', version: '15.0.2' }
                };

                outputDiv.innerHTML = '<div style="color: var(--warning)">Изпълнявам кода...</div>';

                try {
                    const response = await fetch('https://emkc.org/api/v2/piston/execute', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            language: pistonLanguages[language].name,
                            version: pistonLanguages[language].version,
                            files: [{ content: code }],
                            stdin: input,
                            compile_timeout: language === 'java' ? 10000 : 5000,
                            run_timeout: 3000
                        })
                    });

                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }

                    const result = await response.json();

                    if (result.compile && result.compile.stderr) {
                        outputDiv.innerHTML = `<div style="color: var(--danger)">Грешка при компилация:<br><pre>${escapeHtml(result.compile.stderr)}</pre></div>`;
                    } else if (result.run && result.run.stderr) {
                        outputDiv.innerHTML = `<div style="color: var(--danger)">Грешка при изпълнение:<br><pre>${escapeHtml(result.run.stderr)}</pre></div>`;
                    } else {
                        outputDiv.innerHTML = `<pre>${escapeHtml(result.run.output) || "Кодът изпълнен успешно (без изход)"}</pre>`;
                    }
                } catch (error) {
                    outputDiv.innerHTML = `<div style="color: var(--danger)">Грешка: ${escapeHtml(error.message)}</div>`;
                }
            }

            // HTML escape function
            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }

            // Smooth scrolling
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', e => {
                    e.preventDefault();
                    const targetId = anchor.getAttribute('href');
                    if (targetId !== '#') {
                        document.querySelector(targetId)?.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Close menu on scroll
            window.addEventListener('scroll', () => {
                if (navMenu.classList.contains('active')) {
                    navMenu.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });
        });
    </script>
}