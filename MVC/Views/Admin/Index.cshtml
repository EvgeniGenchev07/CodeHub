<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeBattle Admin - Управление на Двубои и Курсове</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin.css" />
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <span class="logo-icon"><i class="fas fa-code"></i></span>
            <span class="logo-text">CodeBattle <span class="admin-badge">ADMIN</span></span>
        </div>

        <button class="hamburger" id="hamburger">
            <i class="fas fa-bars"></i>
        </button>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav" id="admin-nav">
        <ul class="admin-nav-links">
            <li><a href="#" class="active"><i class="fas fa-home"></i> Начало</a></li>
            <li><a href="/admin/battles"><i class="fas fa-trophy"></i> Двубои</a></li>
            <li><a href="/admin/courses"><i class="fas fa-graduation-cap"></i> Курсове</a></li>
            <li><a href="/admin/exercises"><i class="fas fa-graduation-cap"></i> Упражнения</a></li>
            <li><a href="/admin/forum"><i class="fas fa-comments"></i> Форум</a></li>
            <li><a href="/admin/back"><i class="fas fa-sign-out-alt"></i> Назад</a></li>
            <li><a href="/identity/account/logout"><i class="fas fa-sign-out-alt"></i> Изход</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <!-- Content -->
        <div class="admin-content">
            <!-- Dashboard Section -->
            <section id="dashboard">
                <div class="admin-header">
                    <h1 class="admin-title">Статистика</h1>
                    <button class="btn btn-primary"><i class="fas fa-plus"></i> Създай курс</button>
                </div>

                <!-- Stats -->
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-title">Активни потребители</div>
                        <div class="stat-value">@ViewBag.ActiveUsers</div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-title">Двубои</div>
                        <div class="stat-value">@ViewBag.Battles</div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-title">Курсове</div>
                        <div class="stat-value">@ViewBag.Courses</div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-title">Форум постове</div>
                        <div class="stat-value">@ViewBag.ForumPosts</div>
                    </div>
                </div>

                <!-- Battles Table -->
                <h2 class="admin-title">Последни Двубои</h2>
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>Име</th>
                            <th>Статус</th>
                            <th>Награда</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>

                <!-- Courses Table -->
                <h2 class="admin-title">Последни Курсове</h2>
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>Име</th>
                            <th>Ниво</th>
                            <th>Уроци</th>
                            <th>Ученици</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>JavaScript Основи</td>
                            <td><span class="status-badge badge-beginner">Начинаещ</span></td>
                            <td>20</td>
                            <td>1,500+</td>
                            <td>
                                <div class="table-actions">
                                    <button class="btn btn-outline btn-sm"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm"><i class="fas fa-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>DOM Манипулация</td>
                            <td><span class="status-badge badge-intermediate">Средно ниво</span></td>
                            <td>15</td>
                            <td>850+</td>
                            <td>
                                <div class="table-actions">
                                    <button class="btn btn-outline btn-sm"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm"><i class="fas fa-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td>Асинхронен JavaScript</td>
                            <td><span class="status-badge badge-advanced">Напреднал</span></td>
                            <td>12</td>
                            <td>500+</td>
                            <td>
                                <div class="table-actions">
                                    <button class="btn btn-outline btn-sm"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm"><i class="fas fa-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>

                <!-- Add New Battle Form -->
                <h2 class="admin-title">Създай нов двубой</h2>
                <form class="admin-form" id="battleForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Име на двубоя</label>
                            <input type="text" class="form-control" name="title" placeholder="Въведете име на двубоя" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Описание</label>
                        <textarea class="form-control" name="description" placeholder="Описание на двубоя и правилата"></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Начална дата</label>
                            <input type="datetime-local" class="form-control" name="startDate" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Крайна дата</label>
                            <input type="datetime-local" class="form-control" name="endDate" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Награда (XP)</label>
                            <input type="number" class="form-control" name="rewardXP" placeholder="XP точки" required min="1">
                        </div>
                    </div>

                    <div class="form-footer">
                        <button type="button" class="btn btn-outline">Отказ</button>
                        <button type="submit" class="btn btn-primary">Създай двубой</button>
                    </div>
                </form>
            </section>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const hamburger = document.getElementById('hamburger');
            const adminNav = document.getElementById('admin-nav');


            hamburger.addEventListener('click', function () {
                adminNav.classList.toggle('active');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });


            document.addEventListener('click', function (event) {
                if (!adminNav.contains(event.target) && !hamburger.contains(event.target)) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            window.addEventListener('scroll', function () {
                if (adminNav.classList.contains('active')) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            document.getElementById('battleForm').addEventListener('submit', function(e) {
                e.preventDefault();
                if (this.dataset.id) {
                    updateBattle(e);
                } else {
                    createNewBattle(e);
                }
            });

            document.querySelector('.btn-outline[type="button"]').addEventListener('click', clearForm);

            document.querySelector('.admin-table:first-of-type tbody').addEventListener('click', function(e) {
                const row = e.target.closest('tr');
                if (!row) return;

                const battleId = row.dataset.id;

                if (e.target.closest('.btn-outline')) {
                    editBattle(battleId);
                }

                if (e.target.closest('.btn-danger')) {
                    deleteBattle(battleId);
                }
            });

            loadBattles();
        });

        function resetFormToCreateMode() {
            const form = document.getElementById('battleForm');
            form.reset();
            form.querySelector('button[type="submit"]').textContent = 'Създай двубой';
            delete form.dataset.id;

            const formTitle = document.querySelector('#dashboard h2.admin-title:last-of-type');
            if (formTitle) {
                formTitle.textContent = 'Създай нов двубой';
            }
        }


        function clearForm() {
            resetFormToCreateMode();
        }


        async function createNewBattle(event) {
            const form = event.target;

            const battleData = {
                title: form.elements['title'].value,
                description: form.elements['description'].value,
                startDate: form.elements['startDate'].value,
                endDate: form.elements['endDate'].value,
                rewardXP: parseInt(form.elements['rewardXP'].value)
            };

            try {
                const response = await fetch('/Admin/CreateBattle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(battleData)
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error);
                }

                const result = await response.json();
                alert(result.message || 'Двубоят е създаден успешно!');
                resetFormToCreateMode();
                loadBattles();
            } catch (error) {
                console.error('Грешка:', error);
                alert(error.message || 'Възникна грешка при създаването на двубоя!');
            }
        }

        async function editBattle(battleId) {
            try {

                const response = await fetch(`/Admin/GetAllBattles`);
                const battles = await response.json();
                const battle = battles.find(b => b.id == battleId);

                if (!battle) {
                    throw new Error('Двубоят не е намерен!');
                }


                const formTitle = document.querySelector('#dashboard h2.admin-title:last-of-type');
                if (formTitle) {
                    formTitle.textContent = `Редактиране на двубой: ${battle.title}`;
                }


                const form = document.getElementById('battleForm');
                form.elements['title'].value = battle.title;
                form.elements['description'].value = battle.description;

                const startDate = new Date(battle.startDate);
                const endDate = new Date(battle.endDate);

                form.elements['startDate'].value = startDate.toISOString().slice(0, 16);
                form.elements['endDate'].value = endDate.toISOString().slice(0, 16);
                form.elements['rewardXP'].value = battle.rewardXP;

                form.dataset.id = battleId;

                form.querySelector('button[type="submit"]').textContent = 'Запази промените';

                form.scrollIntoView({ behavior: 'smooth' });

            } catch (error) {
                console.error('Грешка при редактиране на двубой:', error);
                alert(error.message || 'Възникна грешка при зареждането на двубоя за редактиране!');
            }
        }

        async function updateBattle(event) {
            const form = event.target;
            const battleId = form.dataset.id;

            const battleData = {
                id: parseInt(battleId),
                title: form.elements['title'].value,
                description: form.elements['description'].value,
                startDate: form.elements['startDate'].value,
                endDate: form.elements['endDate'].value,
                rewardXP: parseInt(form.elements['rewardXP'].value)
            };

            try {
                const response = await fetch(`/Admin/UpdateBattle/${battleId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(battleData)
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error);
                }

                const result = await response.json();
                alert(result.message || 'Двубоят е обновен успешно!');

                resetFormToCreateMode();

                loadBattles();
            } catch (error) {
                console.error('Грешка:', error);
                alert(error.message || 'Възникна грешка при обновяването на двубоя!');
            }
        }

        async function deleteBattle(battleId) {
            if (!confirm('Сигурни ли сте, че искате да изтриете този двубой?')) {
                return;
            }

            try {
                const response = await fetch(`/Admin/DeleteBattle/${battleId}`, {
                    method: 'DELETE'
                });

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(error);
                }

                const result = await response.json();
                alert(result.message || 'Двубоят е изтрит успешно!');

                loadBattles();
            } catch (error) {
                console.error('Грешка:', error);
                alert(error.message || 'Възникна грешка при изтриването на двубоя!');
            }
        }

        async function loadBattles() {
            try {
                const response = await fetch('/Admin/GetAllBattles');
                const battles = await response.json();

                const now = new Date();

 
                battles.sort((a, b) => new Date(b.startDate) - new Date(a.startDate));

                const recentBattles = battles.slice(0, 3);

                const tableBody = document.querySelector('.admin-table:first-of-type tbody');
                tableBody.innerHTML = '';

                recentBattles.forEach(battle => {
                    const start = new Date(battle.startDate);
                    const end = new Date(battle.endDate);

                    let statusClass = '';
                    let statusText = '';

                    if (now < start) {
                        statusClass = 'status-pending';
                        statusText = 'Започва скоро';
                    } else if (now >= start && now <= end) {
                        statusClass = 'status-active';
                        statusText = 'Активен';
                    } else {
                        statusClass = 'status-ended';
                        statusText = 'Завършен';
                    }

                    const row = `
                        <tr data-id="${battle.id}">
                            <td>${battle.title}</td>
                            <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                            <td>${battle.rewardXP} XP</td>
                            <td>
                                <div class="table-actions">
                                    <button class="btn btn-outline btn-sm"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm"><i class="fas fa-trash"></i></button>
                                </div>
                            </td>
                        </tr>
                    `;
                    tableBody.insertAdjacentHTML('beforeend', row);
                });

            } catch (error) {
                console.error('Грешка при зареждане на двубои:', error);
                alert('Възникна грешка при зареждането на двубоите!');
            }
        }
    </script>

</body>
</html>