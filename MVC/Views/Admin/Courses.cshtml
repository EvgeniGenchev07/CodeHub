<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeHub Admin - Курсове</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/admin_courses.css">
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <span class="logo-icon"><i class="fas fa-code"></i></span>
            <span class="logo-text">CodeHub <span class="admin-badge">ADMIN</span></span>
        </div>

        <button class="hamburger" id="hamburger">
            <i class="fas fa-bars"></i>
        </button>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav" id="admin-nav">
        <ul class="admin-nav-links">
            <li><a href="/admin/index"><i class="fas fa-home"></i> Начало</a></li>
            <li><a href="/admin/battles"><i class="fas fa-trophy"></i> Двубои</a></li>
            <li><a href="/admin/courses" class="active"><i class="fas fa-graduation-cap"></i> Курсове</a></li>
            <li><a href="/admin/lessons"><i class="fas fa-book"></i> Уроци</a></li>
            <li><a href="/admin/exercises"><i class="fas fa-graduation-cap"></i> Упражнения</a></li>
            <li><a href="/admin/forum"><i class="fas fa-comments"></i> Форум</a></li>
            <li><a href="/admin/back"><i class="fas fa-sign-out-alt"></i> Назад</a></li>
            <li><a href="/identity/account/logout"><i class="fas fa-sign-out-alt"></i> Изход</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <!-- Content -->
        <div class="admin-content">
            <section id="courses">
                <div class="admin-header">
                    <h1 class="admin-title">Всички Курсове</h1>
                    <button class="btn btn-primary" id="createCourseBtn"><i class="fas fa-plus"></i> Нов курс</button>
                </div>

                <!-- Table Controls -->
                <div class="table-controls">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="searchInput" placeholder="Търсене на курсове...">
                    </div>

                    <div class="filter-group">
                        <select class="filter-select" id="difficultyFilter">
                            <option value="all">Всички трудности</option>
                            <option value="Easy">Easy</option>
                            <option value="Intermediate">Intermediate</option>
                            <option value="Hard">Hard</option>
                            <option value="Extreme">Extreme</option>
                            <option value="Insane">Insane</option>
                            <option value="HardenBeard">HardenBeard</option>
                        </select>

                        <select class="filter-select" id="sortBy">
                            <option value="newest">Най-нови</option>
                            <option value="oldest">Най-стари</option>
                            <option value="title-asc">По име (A-Z)</option>
                            <option value="title-desc">По име (Z-A)</option>
                        </select>
                    </div>
                </div>

                <!-- Courses Table -->
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Име</th>
                            <th>Описание</th>
                            <th>Трудност</th>
                            <th>Филтри</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody id="coursesTableBody">
                        <!-- Данните ще се зареждат тук чрез JavaScript -->
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="pagination-container">
                    <div class="items-per-page">
                        <span>Брой на страница:</span>
                        <select class="items-select" id="itemsPerPage">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                        </select>
                    </div>

                    <ul class="pagination" id="pagination">
                        <!-- Пагинацията ще се генерира тук -->
                    </ul>
                </div>
            </section>
        </div>
    </main>

    <!-- Edit Course Modal -->
    <div class="modal" id="editModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Редактиране на курс</h3>
                <button class="close-modal" id="closeEditModal">×</button>
            </div>
            <form id="editCourseForm">
                <input type="hidden" id="editCourseId" name="id">
                <div class="form-group">
                    <label class="form-label">Име на курса</label>
                    <input type="text" class="form-control" id="editCourseName" name="name" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="editCourseDescription" name="description" rows="3"></textarea>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Трудност</label>
                        <select class="form-control" id="editCourseDifficulty" name="difficulty" required>
                            <option value="0">Easy</option>
                            <option value="1">Intermediate</option>
                            <option value="2">Hard</option>
                            <option value="3">Extreme</option>
                            <option value="4">Insane</option>
                            <option value="5">HardenBeard</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">Филтри</label>
                    <select class="form-control" id="editCourseFilters" name="filters" multiple>
                        <option value="0">JavaScript</option>
                        <option value="1">Алгоритми</option>
                        <option value="2">C#</option>
                        <option value="3">Python</option>
                        <option value="4">Java</option>
                        <option value="5">C</option>
                        <option value="6">C++</option>
                        <option value="7">Ruby</option>
                        <option value="8">Go</option>
                        <option value="9">Rust</option>
                        <option value="10">Swift</option>
                        <option value="11">Проекти</option>
                        <option value="12">Интервюта</option>
                        <option value="13">Асинхронност</option>
                        <option value="14">Синхронност</option>
                        <option value="15">DOM & Assembly</option>
                        <option value="16">React</option>
                        <option value="17">Vue.js</option>
                        <option value="18">Node.js</option>
                        <option value="19">TypeScript</option>
                        <option value="20">API</option>
                        <option value="21">Бази данни</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Лектор</label>
                    <select class="form-control" id="editCourseLector" name="lectorId">
                        <!-- Лекторите ще се зареждат тук чрез JavaScript -->
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Уроци</label>
                    <div class="lessons-container" id="lessonsContainer">
                        <!-- Уроците ще се генерират тук чрез JavaScript -->
                    </div>
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelEdit">Отказ</button>
                    <button type="submit" class="btn btn-primary">Запази промените</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Потвърждение за изтриване</h3>
                <button class="close-modal" id="closeDeleteModal">×</button>
            </div>
            <div class="modal-body">
                <div class="warning-message">
                    <i class="fas fa-exclamation-triangle warning-icon"></i>
                    <p>Сигурни ли сте, че искате да изтриете този курс?</p>
                </div>
                <div class="course-info">
                    <p><strong>Име:</strong> <span id="deleteCourseName"></span></p>
                    <p><strong>ID:</strong> <span id="deleteCourseIdText"></span></p>
                    <p><strong>Трудност:</strong> <span id="deleteCourseDifficulty"></span></p>
                </div>
                <p class="delete-warning">Това действие е необратимо и ще изтрие всички данни, свързани с курса, включително уроци и упражнения!</p>
            </div>
            <input type="hidden" id="deleteCourseId">
            <div class="modal-footer">
                <button type="button" class="btn btn-outline" id="cancelDelete">Отказ</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">
                    <i class="fas fa-trash"></i> Потвърди изтриване
                </button>
            </div>
        </div>
    </div>

    <script>
                document.addEventListener('DOMContentLoaded', function() {
            // Hamburger меню
            const hamburger = document.getElementById('hamburger');
            const adminNav = document.getElementById('admin-nav');

            hamburger.addEventListener('click', function() {
                adminNav.classList.toggle('active');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });

            document.addEventListener('click', function(event) {
                if (!adminNav.contains(event.target) && !hamburger.contains(event.target)) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            // Глобални променливи
            let demoCourses = [];
            let demoLectors = [];
            let demoLessons = [];
            let currentPage = 1;
            let itemsPerPage = 10;
            let filteredCourses = [];

            // Enum мапинги
            const difficultyMap = {
                0: 'Easy',
                1: 'Intermediate',
                2: 'Hard',
                3: 'Extreme',
                4: 'Insane',
                5: 'HardenBeard'
            };

            const filterMap = {
                0: 'JavaScript',
                1: 'Алгоритми',
                2: 'C#',
                3: 'Python',
                4: 'Java',
                5: 'C',
                6: 'C++',
                7: 'Ruby',
                8: 'Go',
                9: 'Rust',
                10: 'Swift',
                11: 'Проекти',
                12: 'Интервюта',
                13: 'Асинхронност',
                14: 'Синхронност',
                15: 'DOM & Assembly',
                16: 'React',
                17: 'Vue.js',
                18: 'Node.js',
                19: 'TypeScript',
                20: 'API',
                21: 'Бази данни'
            };

            // Хелпер функции за конвертиране
            function convertDifficulty(difficultyValue) {
                return difficultyMap[difficultyValue] || difficultyValue;
            }

            function convertFilters(filterValues) {
                if (Array.isArray(filterValues)) {
                    return filterValues.map(f => filterMap[f] || f);
                }
                return filterValues;
            }

            function convertDifficultyToValue(difficultyText) {
                const reverseMap = {
                    'Easy': 0,
                    'Intermediate': 1,
                    'Hard': 2,
                    'Extreme': 3,
                    'Insane': 4,
                    'HardenBeard': 5
                };
                return reverseMap[difficultyText] || 0;
            }

            function convertFilterToValue(filterText) {
                const reverseMap = {
                    'JavaScript': 0,
                    'Алгоритми': 1,
                    'C#': 2,
                    'Python': 3,
                    'Java': 4,
                    'C': 5,
                    'C++': 6,
                    'Ruby': 7,
                    'Go': 8,
                    'Rust': 9,
                    'Swift': 10,
                    'Проекти': 11,
                    'Интервюта': 12,
                    'Асинхронност': 13,
                    'Синхронност': 14,
                    'DOM & Assembly': 15,
                    'React': 16,
                    'Vue.js': 17,
                    'Node.js': 18,
                    'TypeScript': 19,
                    'API': 20,
                    'Бази данни': 21
                };
                return reverseMap[filterText] || 0;
            }

            loadCourses();
            loadLectors();
            loadLessons();

            document.getElementById('searchInput').addEventListener('input', filterCourses);
            document.getElementById('difficultyFilter').addEventListener('change', filterCourses);
            document.getElementById('sortBy').addEventListener('change', filterCourses);
            document.getElementById('itemsPerPage').addEventListener('change', function() {
                itemsPerPage = parseInt(this.value);
                currentPage = 1;
                updateTable();
            });

            document.getElementById('closeEditModal').addEventListener('click', closeEditModal);
            document.getElementById('cancelEdit').addEventListener('click', closeEditModal);
            document.getElementById('closeDeleteModal').addEventListener('click', closeDeleteModal);
            document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);
            document.getElementById('confirmDelete').addEventListener('click', confirmDelete);
            document.getElementById('editCourseForm').addEventListener('submit', saveCourseChanges);

            document.getElementById('createCourseBtn').addEventListener('click', function() {
                resetEditModal();
                document.querySelector('#editModal .modal-title').textContent = 'Създай курс';
                document.getElementById('editModal').style.display = 'block';
            });

            async function loadCourses() {
                try {
                    const response = await fetch('/Admin/GetAllCourses');
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Грешка при извличане на курсове');
                    }
                    demoCourses = await response.json();

                    demoCourses.forEach(course => {
                        course.difficulty = convertDifficulty(course.difficulty);
                        if (course.filters) {
                            course.filters = convertFilters(course.filters);
                        }
                    });

                    filteredCourses = [...demoCourses];
                    updateTable();
                } catch (error) {
                    console.error('Error loading courses:', error);
                    alert('Грешка при зареждане на курсовете: ' + error.message);
                }
            }

            async function loadLectors() {
                try {
                    const response = await fetch('/Admin/GetAllLectors');
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Грешка при извличане на лектори');
                    }
                    demoLectors = await response.json();
                    renderLectorDropdown();
                } catch (error) {
                    console.error('Error loading lectors:', error);
                    alert('Грешка при зареждане на лекторите: ' + error.message);
                }
            }

            async function loadLessons() {
                try {
                    const response = await fetch('/Admin/GetAllLessons');
                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Грешка при извличане на уроци');
                    }
                    demoLessons = await response.json();

                    demoLessons.forEach(lesson => {
                        lesson.difficulty = convertDifficulty(lesson.difficulty);
                    });

                    renderLessonCheckboxes();
                } catch (error) {
                    console.error('Error loading lessons:', error);
                    alert('Грешка при зареждане на уроците: ' + error.message);
                }
            }

            function renderLectorDropdown() {
                const dropdown = document.getElementById('editCourseLector');
                dropdown.innerHTML = '<option value="">-- Избери лектор --</option>';

                demoLectors.forEach(lector => {
                    const option = document.createElement('option');
                    option.value = lector.id;
                    option.textContent = lector.name;
                    dropdown.appendChild(option);
                });
            }

            function renderLessonCheckboxes() {
                const container = document.getElementById('lessonsContainer');
                container.innerHTML = '';

                demoLessons.forEach(lesson => {
                    const lessonDiv = document.createElement('div');
                    lessonDiv.className = 'lesson-item';
                    lessonDiv.innerHTML = `
                        <input type="checkbox" id="lesson-${lesson.id}" class="lesson-checkbox" value="${lesson.id}">
                        <div class="lesson-info">
                            <span class="lesson-title">${lesson.title}</span>
                            <span class="lesson-difficulty ${getDifficultyClass(lesson.difficulty)}">${lesson.difficulty}</span>
                        </div>
                    `;
                    container.appendChild(lessonDiv);
                });

                const addLessonBtn = document.createElement('div');
                addLessonBtn.className = 'add-lesson-btn';
                addLessonBtn.innerHTML = `<i class="fas fa-plus"></i> Добави нов урок`;
                addLessonBtn.addEventListener('click', () => {
                    window.open('/admin/lessons/create', '_blank');
                });
                container.appendChild(addLessonBtn);
            }

            function filterCourses() {
                const searchTerm = document.getElementById('searchInput').value.toLowerCase();
                const difficultyFilter = document.getElementById('difficultyFilter').value;
                const sortBy = document.getElementById('sortBy').value;

                filteredCourses = demoCourses.filter(course => {
                    const matchesSearch = course.name.toLowerCase().includes(searchTerm) ||
                        (course.description && course.description.toLowerCase().includes(searchTerm));

                    const matchesDifficulty = difficultyFilter === 'all' ||
                        course.difficulty === difficultyFilter;

                    return matchesSearch && matchesDifficulty;
                });

                filteredCourses.sort((a, b) => {
                    if (sortBy === 'newest') return b.id - a.id;
                    if (sortBy === 'oldest') return a.id - b.id;
                    if (sortBy === 'title-asc') return a.name.localeCompare(b.name);
                    if (sortBy === 'title-desc') return b.name.localeCompare(a.name);
                    return 0;
                });

                currentPage = 1;
                updateTable();
            }

            function updateTable() {
                const tableBody = document.getElementById('coursesTableBody');
                const pagination = document.getElementById('pagination');

                const totalPages = Math.ceil(filteredCourses.length / itemsPerPage);
                const startIndex = (currentPage - 1) * itemsPerPage;
                const endIndex = Math.min(startIndex + itemsPerPage, filteredCourses.length);
                const currentCourses = filteredCourses.slice(startIndex, endIndex);

                tableBody.innerHTML = '';
                if (currentCourses.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="6" class="text-center">Няма налични курсове</td></tr>';
                    return;
                }

                currentCourses.forEach(course => {
                    const shortDescription = course.description && course.description.length > 50
                        ? course.description.substring(0, 50) + '...'
                        : course.description;

                    const filtersList = course.filters && course.filters.length > 0
                        ? course.filters.join(', ')
                        : 'Няма';

                    const row = `
                        <tr>
                            <td>${course.id}</td>
                            <td>${course.name}</td>
                            <td>${shortDescription || '-'}</td>
                            <td><span class="difficulty-badge ${getDifficultyClass(course.difficulty)}">${course.difficulty}</span></td>
                            <td>${filtersList}</td>
                            <td>
                                <div class="table-actions">
                                    <button class="btn btn-outline btn-sm" onclick="openEditModal(${course.id})">
                                        <i class="fas fa-edit"></i> Редактирай
                                    </button>
                                    <button class="btn btn-danger btn-sm" onclick="openDeleteModal(${course.id})">
                                        <i class="fas fa-trash"></i> Изтрий
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                    tableBody.insertAdjacentHTML('beforeend', row);
                });

                updatePagination(totalPages);
            }

            function updatePagination(totalPages) {
                const pagination = document.getElementById('pagination');
                pagination.innerHTML = '';

                if (totalPages <= 1) return;

                const prevItem = document.createElement('li');
                prevItem.className = 'page-item';
                prevItem.innerHTML = `
                    <a href="#" class="page-link ${currentPage === 1 ? 'disabled' : ''}"
                       onclick="${currentPage === 1 ? 'return false;' : `changePage(${currentPage - 1}); return false;`}">
                        <i class="fas fa-chevron-left"></i>
                    </a>
                `;
                pagination.appendChild(prevItem);

                const maxVisiblePages = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                if (endPage - startPage + 1 < maxVisiblePages) {
                    startPage = Math.max(1, endPage - maxVisiblePages + 1);
                }

                if (startPage > 1) {
                    const firstItem = document.createElement('li');
                    firstItem.className = 'page-item';
                    firstItem.innerHTML = `<a href="#" class="page-link" onclick="changePage(1); return false;">1</a>`;
                    pagination.appendChild(firstItem);

                    if (startPage > 2) {
                        const dotsItem = document.createElement('li');
                        dotsItem.className = 'page-item';
                        dotsItem.innerHTML = `<span class="page-link">...</span>`;
                        pagination.appendChild(dotsItem);
                    }
                }

                for (let i = startPage; i <= endPage; i++) {
                    const pageItem = document.createElement('li');
                    pageItem.className = 'page-item';
                    pageItem.innerHTML = `
                        <a href="#" class="page-link ${i === currentPage ? 'active' : ''}"
                           onclick="changePage(${i}); return false;">${i}</a>
                    `;
                    pagination.appendChild(pageItem);
                }

                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        const dotsItem = document.createElement('li');
                        dotsItem.className = 'page-item';
                        dotsItem.innerHTML = `<span class="page-link">...</span>`;
                        pagination.appendChild(dotsItem);
                    }

                    const lastItem = document.createElement('li');
                    lastItem.className = 'page-item';
                    lastItem.innerHTML = `<a href="#" class="page-link" onclick="changePage(${totalPages}); return false;">${totalPages}</a>`;
                    pagination.appendChild(lastItem);
                }

                const nextItem = document.createElement('li');
                nextItem.className = 'page-item';
                nextItem.innerHTML = `
                    <a href="#" class="page-link ${currentPage === totalPages ? 'disabled' : ''}"
                       onclick="${currentPage === totalPages ? 'return false;' : `changePage(${currentPage + 1}); return false;`}">
                        <i class="fas fa-chevron-right"></i>
                    </a>
                `;
                pagination.appendChild(nextItem);
            }

            function changePage(page) {
                currentPage = page;
                updateTable();
            }

            async function openEditModal(id) {
                try {
                    let course;
                    if (id) {
                        const response = await fetch(`/Admin/GetCourse/${id}`);
                        if (!response.ok) {
                            const error = await response.json();
                            throw new Error(error.message || 'Грешка при извличане на курс');
                        }
                        course = await response.json();

                        course.difficulty = convertDifficulty(course.difficulty);
                        if (course.filters) {
                            course.filters = course.filters.map(f => convertFilters(f));
                        }
                    } else {
                        course = {
                            name: '',
                            description: '',
                            difficulty: 'Easy',
                            filters: [],
                            lector: null,
                            lessons: []
                        };
                    }

                    document.getElementById('editCourseId').value = course.id || '';
                    document.getElementById('editCourseName').value = course.name;
                    document.getElementById('editCourseDescription').value = course.description || '';

                    // Селектиране на правилната трудност
                    const difficultySelect = document.getElementById('editCourseDifficulty');
                    for (let i = 0; i < difficultySelect.options.length; i++) {
                        if (difficultySelect.options[i].text === course.difficulty) {
                            difficultySelect.selectedIndex = i;
                            break;
                        }
                    }

                    // Обработка на филтрите
                    const filtersSelect = document.getElementById('editCourseFilters');
                    Array.from(filtersSelect.options).forEach(option => {
                        option.selected = course.filters && course.filters.includes(option.text);
                    });

                    if (course.lector && course.lector.id) {
                        document.getElementById('editCourseLector').value = course.lector.id;
                    } else {
                        document.getElementById('editCourseLector').value = '';
                    }

                    if (course.lessons && course.lessons.length > 0) {
                        course.lessons.forEach(lessonId => {
                            const checkbox = document.getElementById(`lesson-${lessonId}`);
                            if (checkbox) {
                                checkbox.checked = true;
                            }
                        });
                    }

                    document.querySelector('#editModal .modal-title').textContent = id ? 'Редактиране на курс' : 'Създай курс';
                    document.getElementById('editModal').style.display = 'block';
                } catch (error) {
                    console.error('Error opening edit modal:', error);
                    alert('Грешка при отваряне на курса за редактиране: ' + error.message);
                }
            }

            function resetEditModal() {
                document.getElementById('editCourseId').value = '';
                document.getElementById('editCourseName').value = '';
                document.getElementById('editCourseDescription').value = '';
                document.getElementById('editCourseDifficulty').value = 'Easy';
                document.getElementById('editCourseLector').value = '';

                const filtersSelect = document.getElementById('editCourseFilters');
                Array.from(filtersSelect.options).forEach(option => {
                    option.selected = false;
                });

                const lessonCheckboxes = document.querySelectorAll('.lesson-checkbox');
                lessonCheckboxes.forEach(checkbox => {
                    checkbox.checked = false;
                });
            }

            function closeEditModal() {
                document.getElementById('editModal').style.display = 'none';
            }

            function openDeleteModal(id) {
                const course = demoCourses.find(c => c.id === id);
                if (!course) {
                    alert('Курсът не е намерен!');
                    return;
                }

                document.getElementById('deleteCourseId').value = course.id;
                document.getElementById('deleteCourseName').textContent = course.name;
                document.getElementById('deleteCourseIdText').textContent = course.id;
                document.getElementById('deleteCourseDifficulty').textContent = course.difficulty;
                document.getElementById('deleteModal').style.display = 'block';
            }

            function closeDeleteModal() {
                document.getElementById('deleteModal').style.display = 'none';
            }

            async function saveCourseChanges(e) {
                e.preventDefault();

                const form = document.getElementById('editCourseForm');
                const formData = new FormData(form);
                const id = formData.get('id');
                const name = formData.get('name');

                if (!name) {
                    alert('Моля, попълнете име на курса!');
                    return;
                }


                const difficultyText = document.getElementById('editCourseDifficulty').value;
                const difficultyValue = convertDifficultyToValue(difficultyText);

                const selectedFilters = [];
                const filtersSelect = document.getElementById('editCourseFilters');
                Array.from(filtersSelect.selectedOptions).forEach(option => {
                    selectedFilters.push(convertFilterToValue(option.text));
                });

                const selectedLessons = [];
                const lessonCheckboxes = document.querySelectorAll('.lesson-checkbox:checked');
                lessonCheckboxes.forEach(checkbox => {
                    selectedLessons.push({ Id: parseInt(checkbox.value) });
                });

                const courseData = {
                    Id: id ? parseInt(id) : 0,
                    Name: name,
                    Description: formData.get('description') || '',
                    Difficulty: difficultyValue,
                    Filters: selectedFilters,
                    Lector: formData.get('lectorId') ? { Id: parseInt(formData.get('lectorId')) } : null,
                    Lessons: selectedLessons,
                    Students: 0
                };

                try {
                    const url = id ? `/Admin/UpdateCourse/${id}` : '/Admin/CreateCourse';
                    const method = id ? 'PUT' : 'POST';

                    const response = await fetch(url, {
                        method: method,
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(courseData)
                    });

                    const result = await response.json();
                    if (!response.ok) {
                        throw new Error(result.message || 'Грешка при запазване на курс');
                    }

                    await loadCourses();
                    closeEditModal();
                    alert(result.message);
                } catch (error) {
                    console.error('Error saving course:', error);
                    alert('Грешка при запазване на курса: ' + error.message);
                }
            }

            async function confirmDelete() {
                const id = document.getElementById('deleteCourseId').value;

                try {
                    const response = await fetch(`/Admin/DeleteCourse/${id}`, {
                        method: 'DELETE'
                    });

                    if (!response.ok) {
                        const error = await response.json();
                        throw new Error(error.message || 'Грешка при изтриване на курс');
                    }
                    const result = await response.json();

                    await loadCourses();
                    closeDeleteModal();
                    alert(result.message);
                } catch (error) {
                    console.error('Error deleting course:', error);
                    alert('Грешка при изтриване на курса: ' + error.message);
                }
            }

            function getDifficultyClass(difficulty) {
                switch(difficulty) {
                    case 'Easy': return 'difficulty-beginner';
                    case 'Intermediate': return 'difficulty-intermediate';
                    case 'Hard': return 'difficulty-advanced';
                    case 'Extreme': return 'difficulty-extreme';
                    case 'Insane': return 'difficulty-insane';
                    case 'HardenBeard': return 'difficulty-hardenbeard';
                    default: return '';
                }
            }

            window.openEditModal = openEditModal;
            window.openDeleteModal = openDeleteModal;
            window.changePage = changePage;
        });
    </script>
</body>
</html>