<!DOCTYPE html>
<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeBattle Admin - Курсове</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/admin_courses.css" />
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <span class="logo-icon"><i class="fas fa-code"></i></span>
            <span class="logo-text">CodeBattle <span class="admin-badge">ADMIN</span></span>
        </div>

        <button class="hamburger" id="hamburger">
            <i class="fas fa-bars"></i>
        </button>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav" id="admin-nav">
        <ul class="admin-nav-links">
            <li><a href="#"><i class="fas fa-tachometer-alt"></i> Табло</a></li>
            <li><a href="#battles"><i class="fas fa-trophy"></i> Двубои</a></li>
            <li><a href="#courses" class="active"><i class="fas fa-graduation-cap"></i> Курсове</a></li>
            <li><a href="#users"><i class="fas fa-users"></i> Потребители</a></li>
            <li><a href="#settings"><i class="fas fa-cog"></i> Настройки</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <!-- Content -->
        <div class="admin-content">
            <section id="courses">
                <div class="admin-header">
                    <h1 class="admin-title">Всички Курсове</h1>
                    <div class="button-group">
                        <button class="btn btn-primary" id="createCourseBtn"><i class="fas fa-plus"></i> Нов курс</button>
                        <button class="btn btn-success" id="createLessonBtn"><i class="fas fa-plus"></i> Нов урок</button>
                    </div>
                </div>

                <!-- Table Controls -->
                <div class="table-controls">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" id="searchInput" placeholder="Търсене на курсове...">
                    </div>

                    <div class="filter-group">
                        <select class="filter-select" id="difficultyFilter">
                            <option value="">Всички нива</option>
                            <option value="beginner">Начинаещи</option>
                            <option value="intermediate">Напреднали</option>
                            <option value="advanced">Експерти</option>
                        </select>

                        <select class="filter-select" id="sortBy">
                            <option value="newest">Най-нови</option>
                            <option value="oldest">Най-стари</option>
                            <option value="name-asc">Име (А-Я)</option>
                            <option value="name-desc">Име (Я-А)</option>
                        </select>
                    </div>
                </div>

                <!-- Courses Table -->
                <table class="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Име</th>
                            <th>Описание</th>
                            <th>Ниво</th>
                            <th>Лектори</th>
                            <th>Уроци</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody id="coursesTableBody">
                        <!-- Данните ще се зареждат тук чрез JavaScript -->
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="pagination-container">
                    <div class="items-per-page">
                        <span>Брой на страница:</span>
                        <select class="items-select" id="itemsPerPage">
                            <option value="5">5</option>
                            <option value="10" selected>10</option>
                            <option value="20">20</option>
                            <option value="50">50</option>
                        </select>
                    </div>

                    <ul class="pagination" id="pagination">
                        <!-- Пагинацията ще се генерира тук -->
                    </ul>
                </div>
            </section>
        </div>
    </main>

    <!-- Add Course Modal -->
    <div class="modal" id="addCourseModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Добавяне на нов курс</h3>
                <button class="close-modal" id="closeAddModal">×</button>
            </div>
            <form id="addCourseForm">
                <div class="form-group">
                    <label class="form-label">Име на курса</label>
                    <input type="text" class="form-control" id="courseName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="courseDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Ниво на трудност</label>
                    <select class="form-control" id="courseDifficulty" required>
                        <option value="beginner">Начинаещ</option>
                        <option value="intermediate">Напреднал</option>
                        <option value="advanced">Експерт</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Лектори</label>
                    <div id="lectorsContainer">
                        <!-- Лекторите ще се добавят динамично тук -->
                    </div>
                    <button type="button" class="btn btn-outline btn-sm" id="addLectorBtn" style="margin-top: 10px;">
                        <i class="fas fa-plus"></i> Добави лектор
                    </button>
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelAdd">Отказ</button>
                    <button type="submit" class="btn btn-primary">Създай курс</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Course Modal -->
    <div class="modal" id="editCourseModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Редактиране на курс</h3>
                <button class="close-modal" id="closeEditModal">×</button>
            </div>
            <form id="editCourseForm">
                <input type="hidden" id="editCourseId">
                <div class="form-group">
                    <label class="form-label">Име на курса</label>
                    <input type="text" class="form-control" id="editCourseName" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="editCourseDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Ниво на трудност</label>
                    <select class="form-control" id="editCourseDifficulty" required>
                        <option value="beginner">Начинаещ</option>
                        <option value="intermediate">Напреднал</option>
                        <option value="advanced">Експерт</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Лектори</label>
                    <div id="editLectorsContainer">
                        <!-- Лекторите ще се добавят динамично тук -->
                    </div>
                    <button type="button" class="btn btn-outline btn-sm" id="editAddLectorBtn" style="margin-top: 10px;">
                        <i class="fas fa-plus"></i> Добави лектор
                    </button>
                </div>
                <div class="form-group">
                    <label class="form-label">Уроци</label>
                    <div id="editLessonsContainer">
                        <!-- Уроците ще се показват тук като списък -->
                    </div>
                    <button type="button" class="btn btn-success btn-sm" onclick="openSearchLessonsModal(document.getElementById('editCourseId').value)" style="margin-top: 10px;">
                        <i class="fas fa-plus"></i> Добави уроци
                    </button>
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelEdit">Отказ</button>
                    <button type="submit" class="btn btn-primary">Запази промените</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Lesson Modal -->
    <div class="modal" id="addLessonModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Добавяне на нов урок</h3>
                <button class="close-modal" id="closeAddLessonModal">×</button>
            </div>
            <form id="addLessonForm">
                <div class="form-group">
                    <label class="form-label">Заглавие на урока</label>
                    <input type="text" class="form-control" id="lessonTitle" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="lessonDescription" rows="3" required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Видео файл</label>
                    <input type="file" class="form-control" id="lessonVideo" accept="video/*">
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelAddLesson">Отказ</button>
                    <button type="submit" class="btn btn-primary">Създай урок</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Search Lessons Modal -->
    <div class="modal" id="searchLessonsModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Добавяне на уроци</h3>
                <button class="close-modal" id="closeSearchLessonsModal">×</button>
            </div>
            <input type="hidden" id="searchLessonsCourseId">
            <div class="form-group">
                <label class="form-label">Търсене на уроци</label>
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" class="search-input" id="lessonSearchInput" placeholder="Търсене по заглавие или описание...">
                </div>
            </div>
            <div class="search-lessons-table">
                <table>
                    <thead>
                        <tr>
                            <th>Заглавие</th>
                            <th>Описание</th>
                            <th>Действия</th>
                        </tr>
                    </thead>
                    <tbody id="searchLessonsTableBody">
                        <!-- Уроците ще се зареждат тук -->
                    </tbody>
                </table>
            </div>
            <div class="form-footer">
                <button type="button" class="btn btn-outline" id="cancelSearchLessons">Затвори</button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Потвърждение за изтриване</h3>
                <button class="close-modal" id="closeDeleteModal">×</button>
            </div>
            <p>Сигурни ли сте, че искате да изтриете този курс? Всички свързани уроци и упражнения също ще бъдат изтрити.</p>
            <input type="hidden" id="deleteCourseId">
            <div class="form-footer">
                <button type="button" class="btn btn-outline" id="cancelDelete">Отказ</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Изтрий</button>
            </div>
        </div>
    </div>

    <script>
        async function fetchCourses() {
            try {
                const response = await fetch('/Admin/GetAllCourses');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return await response.json();
            } catch (error) {
                console.error('Error fetching courses:', error);
                return [];
            }
        }
        // Данни за демонстрация
        let demoCourses = [
            {
                id: 1,
                name: "Въведение в програмирането",
                description: "Научи основите на програмирането с Python",
                difficulty: "beginner",
                lectors: ["Иван Петров", "Мария Иванова"],
                lessons: [{ id: 1, title: "Въведение в Python" }, { id: 2, title: "Променливи" }],
                lessonCount: 2
            },
            {
                id: 2,
                name: "Уеб разработка с JavaScript",
                description: "Създаване на модерни уеб приложения",
                difficulty: "intermediate",
                lectors: ["Георги Димитров"],
                lessons: [{ id: 3, title: "Основи на JavaScript" }],
                lessonCount: 1
            },
            {
                id: 3,
                name: "Машинно обучение",
                description: "Напреднали техники за машинно обучение",
                difficulty: "advanced",
                lectors: ["Анна Стоянова", "Петър Георгиев", "Стефан Киров"],
                lessons: [],
                lessonCount: 0
            },
            {
                id: 4,
                name: "Бази данни и SQL",
                description: "Проектиране и работа с релационни бази данни",
                difficulty: "intermediate",
                lectors: ["Димитър Василев"],
                lessons: [{ id: 4, title: "Въведение в SQL" }],
                lessonCount: 1
            },
            {
                id: 5,
                name: "Основен HTML и CSS",
                description: "Създаване на статични уеб страници",
                difficulty: "beginner",
                lectors: ["Елена Маркова"],
                lessons: [],
                lessonCount: 0
            }
        ];

        let demoLessons = [
            { id: 1, title: "Въведение в Python", description: "Основи на Python", courseId: 1 },
            { id: 2, title: "Променливи", description: "Работа с променливи в Python", courseId: 1 },
            { id: 3, title: "Основи на JavaScript", description: "Въведение в JS", courseId: 2 },
            { id: 4, title: "Въведение в SQL", description: "Основи на SQL заявки", courseId: 4 },
            { id: 5, title: "Стилизиране с CSS", description: "Основи на CSS", courseId: null }
        ];

        // Конфигурация на пагинацията
        let currentPage = 1;
        let itemsPerPage = 10;
        let filteredCourses = [...demoCourses];

        // Инициализация на страницата
        document.addEventListener('DOMContentLoaded', function() {
            // Хамбургер меню
            const hamburger = document.getElementById('hamburger');
            const adminNav = document.getElementById('admin-nav');

            hamburger.addEventListener('click', function() {
                adminNav.classList.toggle('active');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });

            document.addEventListener('click', function(event) {
                if (!adminNav.contains(event.target) && !hamburger.contains(event.target)) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            // Инициализиране на таблицата и пагинацията
            updateTable();

            // Слушатели за промени във филтрите
            document.getElementById('searchInput').addEventListener('input', filterCourses);
            document.getElementById('difficultyFilter').addEventListener('change', filterCourses);
            document.getElementById('sortBy').addEventListener('change', filterCourses);
            document.getElementById('itemsPerPage').addEventListener('change', function() {
                itemsPerPage = parseInt(this.value);
                currentPage = 1;
                updateTable();
            });

            // Слушатели за модалните прозорци
            document.getElementById('createCourseBtn').addEventListener('click', openAddModal);
            document.getElementById('closeAddModal').addEventListener('click', closeAddModal);
            document.getElementById('cancelAdd').addEventListener('click', closeAddModal);
            document.getElementById('createLessonBtn').addEventListener('click', openAddLessonModal);
            document.getElementById('closeEditModal').addEventListener('click', closeEditModal);
            document.getElementById('cancelEdit').addEventListener('click', closeEditModal);
            document.getElementById('closeDeleteModal').addEventListener('click', closeDeleteModal);
            document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);
            document.getElementById('confirmDelete').addEventListener('click', confirmDelete);
            document.getElementById('closeAddLessonModal').addEventListener('click', closeAddLessonModal);
            document.getElementById('cancelAddLesson').addEventListener('click', closeAddLessonModal);
            document.getElementById('closeSearchLessonsModal').addEventListener('click', closeSearchLessonsModal);
            document.getElementById('cancelSearchLessons').addEventListener('click', closeSearchLessonsModal);

            // Слушатели за формите
            document.getElementById('addCourseForm').addEventListener('submit', addNewCourse);
            document.getElementById('editCourseForm').addEventListener('submit', saveCourseChanges);
            document.getElementById('addLessonForm').addEventListener('submit', addNewLesson);
            document.getElementById('lessonSearchInput').addEventListener('input', searchLessons);

            // Слушатели за бутоните за добавяне на лектори
            document.getElementById('addLectorBtn').addEventListener('click', addLectorField);
            document.getElementById('editAddLectorBtn').addEventListener('click', addEditLectorField);
        });

        // Функция за филтриране на курсовете
        function filterCourses() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const difficultyFilter = document.getElementById('difficultyFilter').value;
            const sortBy = document.getElementById('sortBy').value;

            filteredCourses = demoCourses.filter(course =>
                course.name.toLowerCase().includes(searchTerm) ||
                course.description.toLowerCase().includes(searchTerm)
            );

            if (difficultyFilter) {
                filteredCourses = filteredCourses.filter(course =>
                    course.difficulty === difficultyFilter
                );
            }

            filteredCourses.sort((a, b) => {
                if (sortBy === 'newest') {
                    return b.id - a.id;
                } else if (sortBy === 'oldest') {
                    return a.id - b.id;
                } else if (sortBy === 'name-asc') {
                    return a.name.localeCompare(b.name);
                } else if (sortBy === 'name-desc') {
                    return b.name.localeCompare(a.name);
                }
                return 0;
            });

            currentPage = 1;
            updateTable();
        }

        // Функция за обновяване на таблицата и пагинацията
        function updateTable() {
            const tableBody = document.getElementById('coursesTableBody');
            const pagination = document.getElementById('pagination');

            const totalPages = Math.ceil(filteredCourses.length / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, filteredCourses.length);
            const currentCourses = filteredCourses.slice(startIndex, endIndex);

            tableBody.innerHTML = '';

            currentCourses.forEach(course => {
                let difficultyClass = '';
                let difficultyText = '';

                switch(course.difficulty) {
                    case 'beginner':
                        difficultyClass = 'status-beginner';
                        difficultyText = 'Начинаещ';
                        break;
                    case 'intermediate':
                        difficultyClass = 'status-intermediate';
                        difficultyText = 'Напреднал';
                        break;
                    case 'advanced':
                        difficultyClass = 'status-advanced';
                        difficultyText = 'Експерт';
                        break;
                }

                const row = `
                    <tr>
                        <td>${course.id}</td>
                        <td>${course.name}</td>
                        <td>${course.description}</td>
                        <td><span class="status-badge ${difficultyClass}">${difficultyText}</span></td>
                        <td>${course.lectors.join(', ')}</td>
                        <td>${course.lessonCount}</td>
                        <td>
                            <div class="table-actions">
                                <button class="btn btn-outline btn-sm" onclick="openEditModal(${course.id})">
                                    <i class="fas fa-edit"></i> Редактирай
                                </button>
                                <button class="btn btn-success btn-sm" onclick="openSearchLessonsModal(${course.id})">
                                    <i class="fas fa-plus"></i> Добави урок
                                </button>
                                <button class="btn btn-danger btn-sm" onclick="openDeleteModal(${course.id})">
                                    <i class="fas fa-trash"></i> Изтрий
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', row);
            });

            pagination.innerHTML = '';

            const prevItem = document.createElement('li');
            prevItem.className = 'page-item';
            prevItem.innerHTML = `
                <a href="#" class="page-link ${currentPage === 1 ? 'disabled' : ''}"
                   onclick="${currentPage === 1 ? 'return false;' : `changePage(${currentPage - 1}); return false;`}">
                    <i class="fas fa-chevron-left"></i>
                </a>
            `;
            pagination.appendChild(prevItem);

            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            if (startPage > 1) {
                const firstItem = document.createElement('li');
                firstItem.className = 'page-item';
                firstItem.innerHTML = `<a href="#" class="page-link" onclick="changePage(1); return false;">1</a>`;
                pagination.appendChild(firstItem);

                if (startPage > 2) {
                    const dotsItem = document.createElement('li');
                    dotsItem.className = 'page-item';
                    dotsItem.innerHTML = `<span class="page-link disabled">...</span>`;
                    pagination.appendChild(dotsItem);
                }
            }

            for (let i = startPage; i <= endPage; i++) {
                const pageItem = document.createElement('li');
                pageItem.className = 'page-item';
                pageItem.innerHTML = `
                    <a href="#" class="page-link ${i === currentPage ? 'active' : ''}"
                       onclick="changePage(${i}); return false;">${i}</a>
                `;
                pagination.appendChild(pageItem);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const dotsItem = document.createElement('li');
                    dotsItem.className = 'page-item';
                    dotsItem.innerHTML = `<span class="page-link disabled">...</span>`;
                    pagination.appendChild(dotsItem);
                }

                const lastItem = document.createElement('li');
                lastItem.className = 'page-item';
                lastItem.innerHTML = `<a href="#" class="page-link" onclick="changePage(${totalPages}); return false;">${totalPages}</a>`;
                pagination.appendChild(lastItem);
            }

            const nextItem = document.createElement('li');
            nextItem.className = 'page-item';
            nextItem.innerHTML = `
                <a href="#" class="page-link ${currentPage === totalPages ? 'disabled' : ''}"
                   onclick="${currentPage === totalPages ? 'return false;' : `changePage(${currentPage + 1}); return false;`}">
                    <i class="fas fa-chevron-right"></i>
                </a>
            `;
            pagination.appendChild(nextItem);
        }

        // Функция за промяна на страницата
        function changePage(page) {
            currentPage = page;
            updateTable();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        // Функции за модалните прозорци
        function openAddModal() {
            document.getElementById('addCourseModal').style.display = 'flex';
            document.getElementById('lectorsContainer').innerHTML = '';
            addLectorField();
        }

        function closeAddModal() {
            document.getElementById('addCourseModal').style.display = 'none';
            document.getElementById('addCourseForm').reset();
        }

        function openEditModal(courseId) {
            const course = demoCourses.find(c => c.id === courseId);
            if (!course) return;

            document.getElementById('editCourseId').value = course.id;
            document.getElementById('editCourseName').value = course.name;
            document.getElementById('editCourseDescription').value = course.description;
            document.getElementById('editCourseDifficulty').value = course.difficulty;

            const lectorsContainer = document.getElementById('editLectorsContainer');
            lectorsContainer.innerHTML = '';
            course.lectors.forEach(lector => addEditLectorField(lector));

            const lessonsContainer = document.getElementById('editLessonsContainer');
            lessonsContainer.innerHTML = '';
            if (course.lessons.length === 0) {
                lessonsContainer.innerHTML = '<p>Няма добавени уроци.</p>';
            } else {
                course.lessons.forEach(lesson => {
                    const lessonDiv = document.createElement('div');
                    lessonDiv.className = 'lesson-item';
                    lessonDiv.innerHTML = `
                        <span>${lesson.title}</span>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeLessonFromCourse(${course.id}, ${lesson.id})">
                            <i class="fas fa-trash"></i>
                        </button>
                    `;
                    lessonsContainer.appendChild(lessonDiv);
                });
            }

            document.getElementById('editCourseModal').style.display = 'flex';
        }

        function closeEditModal() {
            document.getElementById('editCourseModal').style.display = 'none';
            document.getElementById('editCourseForm').reset();
        }

        function openAddLessonModal() {
            document.getElementById('addLessonModal').style.display = 'flex';
        }

        function closeAddLessonModal() {
            document.getElementById('addLessonModal').style.display = 'none';
            document.getElementById('addLessonForm').reset();
        }

        function openSearchLessonsModal(courseId) {
            document.getElementById('searchLessonsCourseId').value = courseId;
            document.getElementById('searchLessonsModal').style.display = 'flex';
            document.getElementById('lessonSearchInput').value = '';
            searchLessons();
        }

        function closeSearchLessonsModal() {
            document.getElementById('searchLessonsModal').style.display = 'none';
            document.getElementById('searchLessonsTableBody').innerHTML = '';
        }

        function openDeleteModal(courseId) {
            document.getElementById('deleteCourseId').value = courseId;
            document.getElementById('deleteModal').style.display = 'flex';
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }

        function confirmDelete() {
            const courseId = parseInt(document.getElementById('deleteCourseId').value);
            demoCourses = demoCourses.filter(course => course.id !== courseId);
            demoLessons = demoLessons.map(lesson => lesson.courseId === courseId ? { ...lesson, courseId: null } : lesson);
            filterCourses();
            closeDeleteModal();
            alert('Курсът беше изтрит успешно!');
        }

        // Функция за търсене на уроци
        function searchLessons() {
            const searchTerm = document.getElementById('lessonSearchInput').value.toLowerCase();
            const courseId = parseInt(document.getElementById('searchLessonsCourseId').value);
            const course = demoCourses.find(c => c.id === courseId);
            const tableBody = document.getElementById('searchLessonsTableBody');

            const filteredLessons = demoLessons.filter(lesson =>
                (lesson.title.toLowerCase().includes(searchTerm) || lesson.description.toLowerCase().includes(searchTerm))
            );

            tableBody.innerHTML = '';

            filteredLessons.forEach(lesson => {
                const isAdded = course && course.lessons.some(l => l.id === lesson.id);
                const row = `
                    <tr>
                        <td>${lesson.title}</td>
                        <td>${lesson.description}</td>
                        <td>
                            <button class="btn btn-primary btn-sm" onclick="addLessonToCourse(${courseId}, ${lesson.id})" ${isAdded ? 'disabled' : ''}>
                                <i class="fas fa-plus"></i> Добави
                            </button>
                        </td>
                    </tr>
                `;
                tableBody.insertAdjacentHTML('beforeend', row);
            });
        }

        // Функция за добавяне на урок към курс
        async function addLessonToCourse(courseId, lessonId) {
            const course = demoCourses.find(c => c.id === courseId);
            const lesson = demoLessons.find(l => l.id === lessonId);

            if (course && lesson && !course.lessons.some(l => l.id === lessonId)) {
                course.lessons.push({ id: lesson.id, title: lesson.title });
                course.lessonCount = course.lessons.length;
                lesson.courseId = courseId;

                // В реален проект:
                // await fetch(`/Admin/AddLessonToCourse/${courseId}/${lessonId}`, { method: 'POST' });

                filterCourses();
                searchLessons();
                alert('Урокът беше добавен към курса!');
            }
        }

        // Функция за премахване на урок от курс
        function removeLessonFromCourse(courseId, lessonId) {
            const course = demoCourses.find(c => c.id === courseId);
            const lesson = demoLessons.find(l => l.id === lessonId);

            if (course && lesson) {
                course.lessons = course.lessons.filter(l => l.id !== lessonId);
                course.lessonCount = course.lessons.length;
                lesson.courseId = null;

                // В реален проект:
                // await fetch(`/Admin/RemoveLessonFromCourse/${courseId}/${lessonId}`, { method: 'DELETE' });

                openEditModal(courseId); // Refresh the edit modal
                filterCourses();
                alert('Урокът беше премахнат от курса!');
            }
        }

        // Функции за добавяне на лектори
        function addLectorField(value = '') {
            const lectorsContainer = document.getElementById('lectorsContainer');
            const lectorId = Date.now();

            const lectorDiv = document.createElement('div');
            lectorDiv.className = 'form-row';
            lectorDiv.innerHTML = `
                <div class="form-group" style="flex: 1;">
                    <input type="text" class="form-control" value="${value}" placeholder="Име на лектор" required>
                </div>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeLectorField(this)">
                    <i class="fas fa-trash"></i>
                </button>
            `;
            lectorsContainer.appendChild(lectorDiv);
        }

        function addEditLectorField(value = '') {
            const lectorsContainer = document.getElementById('editLectorsContainer');
            const lectorId = Date.now();

            const lectorDiv = document.createElement('div');
            lectorDiv.className = 'form-row';
            lectorDiv.innerHTML = `
                <div class="form-group" style="flex: 1;">
                    <input type="text" class="form-control" value="${value}" placeholder="Име на лектор" required>
                </div>
                <button type="button" class="btn btn-danger btn-sm" onclick="removeLectorField(this)">
                    <i class="fas fa-trash"></i>
                </button>
            `;
            lectorsContainer.appendChild(lectorDiv);
        }

        function removeLectorField(button) {
            button.parentElement.remove();
        }

        // Функции за обработка на формите
        async function addNewCourse(e) {
            e.preventDefault();

            const name = document.getElementById('courseName').value;
            const description = document.getElementById('courseDescription').value;
            const difficulty = document.getElementById('courseDifficulty').value;

            const lectorInputs = document.querySelectorAll('#lectorsContainer input');
            const lectors = Array.from(lectorInputs).map(input => input.value.trim()).filter(lector => lector !== '');

            if (lectors.length === 0) {
                alert('Моля, добавете поне един лектор!');
                return;
            }

            const newId = demoCourses.length > 0 ? Math.max(...demoCourses.map(c => c.id)) + 1 : 1;

            const newCourse = {
                id: newId,
                name,
                description,
                difficulty,
                lectors,
                lessons: [],
                lessonCount: 0
            };

            // В реален проект:
            // await fetch('/Admin/CreateCourse', { method: 'POST', body: JSON.stringify(newCourse) });
            demoCourses.push(newCourse);
            filterCourses();
            closeAddModal();
            alert('Курсът беше създаден успешно!');
        }

        async function saveCourseChanges(e) {
            e.preventDefault();

            const courseId = parseInt(document.getElementById('editCourseId').value);
            const name = document.getElementById('editCourseName').value;
            const description = document.getElementById('editCourseDescription').value;
            const difficulty = document.getElementById('editCourseDifficulty').value;

            const lectorInputs = document.querySelectorAll('#editLectorsContainer input');
            const lectors = Array.from(lectorInputs).map(input => input.value.trim()).filter(lector => lector !== '');

            if (lectors.length === 0) {
                alert('Моля, добавете поне един лектор!');
                return;
            }

            const courseIndex = demoCourses.findIndex(c => c.id === courseId);
            if (courseIndex !== -1) {
                demoCourses[courseIndex] = {
                    ...demoCourses[courseIndex],
                    name,
                    description,
                    difficulty,
                    lectors
                };

                // В реален проект:
                // await fetch(`/Admin/UpdateCourse/${courseId}`, { method: 'PUT', body: JSON.stringify(demoCourses[courseIndex]) });
                filterCourses();
                closeEditModal();
                alert('Промените бяха запазени успешно!');
            }
        }

        async function addNewLesson(e) {
            e.preventDefault();

            const title = document.getElementById('lessonTitle').value;
            const description = document.getElementById('lessonDescription').value;
            const videoFile = document.getElementById('lessonVideo').files[0];

            const formData = new FormData();
            formData.append('title', title);
            formData.append('description', description);
            if (videoFile) {
                formData.append('video', videoFile);
            }

            try {
                // В реален проект:
                // const response = await fetch('/Admin/CreateLesson', { method: 'POST', body: formData });
                // const newLesson = await response.json();

                const newLessonId = demoLessons.length > 0 ? Math.max(...demoLessons.map(l => l.id)) + 1 : 1;
                const newLesson = {
                    id: newLessonId,
                    title,
                    description,
                    courseId: null
                };

                demoLessons.push(newLesson);
                filterCourses();
                closeAddLessonModal();
                alert('Урокът беше създаден успешно!');
            } catch (error) {
                console.error('Грешка при създаване на урок:', error);
                alert('Възникна грешка при създаването на урока.');
            }
        }
    </script>
</body>
</html>