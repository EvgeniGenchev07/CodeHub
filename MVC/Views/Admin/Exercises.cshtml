<html lang="bg">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeBattle Admin - Упражнения</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/admin_exercises.css">
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <span class="logo-icon"><i class="fas fa-code"></i></span>
            <span class="logo-text">CodeBattle <span class="admin-badge">ADMIN</span></span>
        </div>
        <button class="hamburger" id="hamburger">
            <i class="fas fa-bars"></i>
        </button>
    </header>

    <!-- Admin Navigation -->
    <nav class="admin-nav" id="admin-nav">
        <ul class="admin-nav-links">
            <li><a href="#"><i class="fas fa-tachometer-alt"></i> Табло</a></li>
            <li><a href="#battles"><i class="fas fa-trophy"></i> Двубои</a></li>
            <li><a href="#courses"><i class="fas fa-graduation-cap"></i> Курсове</a></li>
            <li><a href="#exercises" class="active"><i class="fas fa-dumbbell"></i> Упражнения</a></li>
            <li><a href="#forums"><i class="fas fa-comments"></i> Форуми</a></li>
            <li><a href="#users"><i class="fas fa-users"></i> Потребители</a></li>
            <li><a href="#settings"><i class="fas fa-cog"></i> Настройки</a></li>
        </ul>
    </nav>

    <!-- Main Content -->
    <main class="admin-main">
        <div class="admin-content">
            <section id="exercises">
                <div class="admin-header">
                    <h1 class="admin-title">Упражнения</h1>
                    <div class="button-group">
                        <button class="btn btn-primary" id="createExerciseBtn"><i class="fas fa-plus"></i> Ново упражнение</button>
                    </div>
                </div>
                <div class="search-filter-container">
                    <div class="search-box">
                        <input type="text" id="searchInput" placeholder="Търсене по заглавие...">
                        <button class="btn btn-primary" id="searchBtn"><i class="fas fa-search"></i></button>
                    </div>
                </div>
                <div class="table-container">
                    <table class="exercises-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Заглавие</th>
                                <th>Точки</th>
                                <th>Трудност</th>
                                <th>Прегледи</th>
                                <th>Решения</th>
                                <th>Действия</th>
                            </tr>
                        </thead>
                        <tbody id="exercisesTableBody"></tbody>
                    </table>
                </div>
                <div class="pagination-container">
                    <ul class="pagination" id="pagination"></ul>
                </div>
            </section>
        </div>
    </main>

    <!-- Add/Edit Exercise Modal -->
    <div class="modal" id="exerciseModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalExerciseTitle">Създаване на ново упражнение</h3>
                <button class="close-modal" id="closeExerciseModal">×</button>
            </div>
            <form id="exerciseForm">
                <input type="hidden" id="exerciseId">
                <div class="form-group">
                    <label class="form-label">Заглавие</label>
                    <input type="text" class="form-control" id="exerciseTitle" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Описание</label>
                    <textarea class="form-control" id="exerciseDescription" rows="4" required></textarea>
                </div>
                <div class="form-group">
                    <label class="form-label">Трудност</label>
                    <select class="form-control" id="exerciseDifficulty" required>
                        <option value="">Избери трудност</option>
                        <option value="0">Лесно</option>
                        <option value="1">Средно</option>
                        <option value="2">Трудно</option>
                        <option value="3">Екстремно</option>
                        <option value="4">Безумно</option>
                        <option value="5">Твърдо</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Точки</label>
                    <input type="number" class="form-control" id="exercisePoints" min="1" required>
                </div>
                <div class="form-footer">
                    <button type="button" class="btn btn-outline" id="cancelExercise">Отказ</button>
                    <button type="submit" class="btn btn-primary" id="saveExerciseBtn">Запази</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal" id="deleteModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">Потвърждение за изтриване</h3>
                <button class="close-modal" id="closeDeleteModal">×</button>
            </div>
            <div class="modal-body">
                <p>Сигурни ли сте, че искате да изтриете това упражнение? Това действие е необратимо.</p>
                <input type="hidden" id="deleteExerciseId">
            </div>
            <div class="form-footer">
                <button type="button" class="btn btn-outline" id="cancelDelete">Отказ</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Изтрий</button>
            </div>
        </div>
    </div>

    <script>
        let exercises = [];
        let currentPage = 1;
        const itemsPerPage = 10;

        document.addEventListener('DOMContentLoaded', function() {
            const hamburger = document.getElementById('hamburger');
            const adminNav = document.getElementById('admin-nav');

            hamburger.addEventListener('click', function() {
                adminNav.classList.toggle('active');
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-bars');
                icon.classList.toggle('fa-times');
            });

            document.addEventListener('click', function(event) {
                if (!adminNav.contains(event.target) && !hamburger.contains(event.target)) {
                    adminNav.classList.remove('active');
                    hamburger.querySelector('i').classList.add('fa-bars');
                    hamburger.querySelector('i').classList.remove('fa-times');
                }
            });

            document.getElementById('createExerciseBtn').addEventListener('click', openCreateModal);
            document.getElementById('closeExerciseModal').addEventListener('click', closeExerciseModal);
            document.getElementById('cancelExercise').addEventListener('click', closeExerciseModal);
            document.getElementById('exerciseForm').addEventListener('submit', createExercise);
            document.getElementById('searchBtn').addEventListener('click', applyFilters);
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') applyFilters();
            });
            document.getElementById('confirmDelete').addEventListener('click', deleteExercise);
            document.getElementById('cancelDelete').addEventListener('click', closeDeleteModal);
            document.getElementById('closeDeleteModal').addEventListener('click', closeDeleteModal);

            loadExercises();
        });

        async function loadExercises() {
            try {
                showLoadingState();
                const response = await fetch('/Admin/GetAllExercises');
                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                const data = await response.json();
                exercises = Array.isArray(data) ? data : [];
                updateExercisesTable();
            } catch (error) {
                handleLoadError(error);
            }
        }

        function showLoadingState() {
            document.getElementById('exercisesTableBody').innerHTML =
                '<tr><td colspan="7" class="text-center">Зареждане на упражнения...</td></tr>';
        }

        function handleLoadError(error) {
            console.error('Error loading exercises:', error);
            exercises = [];
            document.getElementById('exercisesTableBody').innerHTML =
                `<tr><td colspan="7" class="text-center text-danger">Грешка при зареждане на упражнения: ${error.message}</td></tr>`;
            renderPagination(Math.ceil(exercises.length / itemsPerPage));
        }

        function applyFilters() {
            currentPage = 1;
            updateExercisesTable();
        }

        function updateExercisesTable() {
            const tableBody = document.getElementById('exercisesTableBody');
            const pagination = document.getElementById('pagination');
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();

            let filteredExercises = exercises.filter(exercise => exercise.title.toLowerCase().includes(searchTerm));
            const totalPages = Math.ceil(filteredExercises.length / itemsPerPage);
            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, filteredExercises.length);
            const currentExercises = filteredExercises.slice(startIndex, endIndex);

            tableBody.innerHTML = '';
            if (filteredExercises.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7" class="text-center">Няма налични упражнения</td></tr>';
                renderPagination(totalPages);
                return;
            }

            currentExercises.forEach(exercise => {
                const row = createExerciseRow(exercise);
                tableBody.appendChild(row);
            });

            renderPagination(totalPages);
        }

        function createExerciseRow(exercise) {
            const row = document.createElement('tr');
            const difficultyNames = ['Easy', 'Intermediate', 'Hard', 'Extreme', 'Insane', 'HardenBeard'];
            const difficultyIndex = typeof exercise.difficulty === "number" ? exercise.difficulty : 0;
            const difficultyName = difficultyNames[difficultyIndex] || 'Easy';

            row.innerHTML = `
                <td>${exercise.id || 'N/A'}</td>
                <td>${exercise.title || 'Без заглавие'}</td>
                <td>${exercise.points || 0}</td>
                <td class="difficulty-${difficultyName.toLowerCase()}">${getDifficultyText(difficultyName)}</td>
                <td>${exercise.views || 0}</td>
                <td>${exercise.solutions || 0}</td>
                <td class="actions">
                    <button class="btn btn-primary btn-sm" onclick="editExercise(${exercise.id})">
                        <i class="fas fa-edit"></i> Редактирай
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="confirmDelete(${exercise.id})">
                        <i class="fas fa-trash"></i> Изтрий
                    </button>
                </td>
            `;
            return row;
        }

        function getDifficultyText(difficulty) {
            const difficultyMap = {
                'Easy': 'Лесно',
                'Intermediate': 'Средно',
                'Hard': 'Трудно',
                'Extreme': 'Екстремно',
                'Insane': 'Безумно',
                'HardenBeard': 'Твърдо'
            };
            return difficultyMap[difficulty] || difficulty || ' ';
        }

        function renderPagination(totalPages) {
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
            if (totalPages <= 1) return;

            addPaginationItem(pagination, 'prev', currentPage > 1, () => changePage(currentPage - 1));
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
            if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            if (startPage > 1) {
                addPaginationItem(pagination, '1', true, () => changePage(1));
                if (startPage > 2) addPaginationItem(pagination, '...', false);
            }

            for (let i = startPage; i <= endPage; i++) {
                addPaginationItem(pagination, i.toString(), true, () => changePage(i), i === currentPage);
            }

            if (endPage < totalPages) {
                if (endPage < totalPages - 1) addPaginationItem(pagination, '...', false);
                addPaginationItem(pagination, totalPages.toString(), true, () => changePage(totalPages));
            }

            addPaginationItem(pagination, 'next', currentPage < totalPages, () => changePage(currentPage + 1));
        }

        function addPaginationItem(container, content, enabled, onClick = null, isActive = false) {
            const item = document.createElement('li');
            item.className = 'page-item';
            const isPrev = content === 'prev';
            const isNext = content === 'next';

            if (isPrev || isNext) {
                item.innerHTML = `
                    <a href="#" class="page-link ${enabled ? '' : 'disabled'}">
                        <i class="fas fa-chevron-${isPrev ? 'left' : 'right'}"></i>
                    </a>
                `;
                if (enabled && onClick) {
                    item.querySelector('a').addEventListener('click', (e) => {
                        e.preventDefault();
                        onClick();
                    });
                }
            } else {
                item.innerHTML = `
                    <a href="#" class="page-link ${isActive ? 'active' : ''}">${content}</a>
                `;
                if (onClick) {
                    item.querySelector('a').addEventListener('click', (e) => {
                        e.preventDefault();
                        onClick();
                    });
                }
            }
            container.appendChild(item);
        }

        function changePage(page) {
            currentPage = page;
            updateExercisesTable();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        function openCreateModal() {
            document.getElementById('modalExerciseTitle').textContent = 'Създаване на ново упражнение';
            document.getElementById('exerciseForm').reset();
            document.getElementById('exerciseId').value = '';
            document.getElementById('saveExerciseBtn').textContent = 'Създай';

            // Remove all previous submit event listeners by cloning the form
            const oldForm = document.getElementById('exerciseForm');
            const newForm = oldForm.cloneNode(true);
            oldForm.parentNode.replaceChild(newForm, oldForm);

            newForm.onsubmit = createExercise;
            // Re-attach cancel button event
            newForm.querySelector('#cancelExercise').addEventListener('click', closeExerciseModal);

            document.getElementById('exerciseModal').classList.add('active');
        }

        function closeExerciseModal() {
            document.getElementById('exerciseModal').classList.remove('active');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.remove('active');
        }

        function validateExerciseData(data) {
            if (!data.Title) {
                alert('Заглавието на упражнението е задължително!');
                return false;
            }
            if (!data.Description) {
                alert('Описанието на упражнението е задължително!');
                return false;
            }
            if (data.Difficulty == null) {
                alert('Трудността на упражнението е задължителна!');
                return false;
            }
            if (!data.Points || data.Points < 1) {
                alert('Точките трябва да са поне 1!');
                return false;
            }
            return true;
        }

        async function createExercise(e) {
            e.preventDefault();
            const form = e.target;
            const exerciseData = {
                Title: form.exerciseTitle.value.trim(),
                Description: form.exerciseDescription.value.trim(),
                Points: parseInt(form.exercisePoints.value) || 1,
                Difficulty: parseInt(form.exerciseDifficulty.value)
            };

            if (!validateExerciseData(exerciseData)) return;

            try {
                const response = await fetch('/Admin/CreateExercise', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(exerciseData)
                });

                let result;
                try {
                    result = await response.json();
                } catch (jsonError) {
                    throw new Error(`Invalid response format: ${await response.text()}`);
                }

                if (!response.ok) throw new Error(result.message || `HTTP error: ${response.status}`);

                closeExerciseModal();
                showSuccessMessage('Упражнението е създадено успешно!');
                await loadExercises();
            } catch (error) {
                console.error('Error creating exercise:', error);
                alert(`Грешка при създаване на упражнение: ${error.message}`);
            }
        }

        async function editExercise(id) {
            try {
                let exercise = exercises.find(e => e.id == id);
                if (!exercise) {
                    const response = await fetch(`/Admin/Exercise/${id}`);
                    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                    exercise = await response.json();
                }

                if (!exercise) throw new Error('Упражнението не е намерено');

                document.getElementById('modalExerciseTitle').textContent = 'Редактиране на упражнение';
                document.getElementById('exerciseId').value = exercise.id;
                document.getElementById('exerciseTitle').value = exercise.title;
                document.getElementById('exerciseDescription').value = exercise.description;
                document.getElementById('exerciseDifficulty').value = exercise.difficulty;
                document.getElementById('exercisePoints').value = exercise.points;
                document.getElementById('saveExerciseBtn').textContent = 'Запази промените';

                // Remove all previous submit event listeners by cloning the form
                const oldForm = document.getElementById('exerciseForm');
                const newForm = oldForm.cloneNode(true);
                oldForm.parentNode.replaceChild(newForm, oldForm);

                newForm.onsubmit = updateExercise;
                newForm.querySelector('#cancelExercise').addEventListener('click', closeExerciseModal);
                document.getElementById('exerciseModal').classList.add('active');
            } catch (error) {
                console.error('Error editing exercise:', error);
                alert(`Грешка при зареждане на упражнение: ${error.message}`);
            }
        }

        async function updateExercise(e) {
            e.preventDefault();
            const form = e.target;
            const exerciseData = {
                Id: parseInt(form.exerciseId.value),
                Title: form.exerciseTitle.value.trim(),
                Description: form.exerciseDescription.value.trim(),
                Points: parseInt(form.exercisePoints.value) || 1,
                Difficulty: parseInt(form.exerciseDifficulty.value)
            };

            if (!validateExerciseData(exerciseData)) return;

            try {
                const response = await fetch('/Admin/UpdateExercise', {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(exerciseData)
                });

                let result;
                try {
                    result = await response.json();
                } catch (jsonError) {
                    throw new Error(`Invalid response format: ${await response.text()}`);
                }

                if (!response.ok) throw new Error(result.message || `HTTP error: ${response.status}`);

                closeExerciseModal();
                showSuccessMessage(result.message || 'Упражнението е обновено успешно!');
                await loadExercises();
            } catch (error) {
                console.error('Error updating exercise:', error);
                alert(`Грешка при обновяване на упражнение: ${error.message}`);
            }
        }

        function confirmDelete(id) {
            document.getElementById('deleteExerciseId').value = id;
            document.getElementById('deleteModal').classList.add('active');
        }

        async function deleteExercise() {
            const id = document.getElementById('deleteExerciseId').value;
            try {
                console.log(`Sending DELETE request for ID: ${id}`);
                const response = await fetch(`/Admin/DeleteExercise/${id}`, {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                });

                let result;
                try {
                    result = await response.json();
                } catch (jsonError) {
                    throw new Error(`Invalid response format: ${await response.text()}`);
                }

                if (!response.ok) throw new Error(result.message || `HTTP error: ${response.status}`);

                closeDeleteModal();
                showSuccessMessage(result.message || 'Упражнението е изтрито успешно!');
                await loadExercises();
            } catch (error) {
                console.error('Error deleting exercise:', error);
                alert(`Грешка при изтриване на упражнение: ${error.message}`);
            }
        }

        function showSuccessMessage(message) {
            const existingAlert = document.querySelector('.alert.alert-success');
            if (existingAlert) existingAlert.remove();

            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success';
            alertDiv.style.cssText = `
                background-color: rgba(39, 201, 63, 0.2);
                color: var(--success);
                padding: 10px 20px;
                border-radius: 10px;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            `;
            alertDiv.innerHTML = `
                <i class="fas fa-check-circle"></i> ${message}
                <button type="button" style="margin-left: auto; background: none; border: none; color: var(--light); cursor: pointer;">×</button>
            `;
            alertDiv.querySelector('button').addEventListener('click', () => alertDiv.remove());
            document.getElementById('exercises').insertBefore(alertDiv, document.getElementById('exercises').firstChild);
            setTimeout(() => alertDiv.remove(), 5000);
        }
    </script>
</body>
</html>